package require tcltest
package require twebserver

namespace import -force ::tcltest::test

::tcltest::configure {*}$argv

set server_file "setup_server_routing.tcl"
set server_port 12345
set client_port 54321
set control_port 11111
set dir [file dirname [info script]]

proc sleep {ms} {
    after $ms [list set ::sleep 1]
    vwait ::sleep
    unset ::sleep
}

proc setup {} {
    global server_pid
    global dir
    global server_file
    set TCLSH tclsh[info tclversion]
    set server_pid [exec -ignorestderr -- $TCLSH [file join $dir ${server_file}] &]
    sleep 1000
}

proc cleanup {} {
    global server_pid
    exec -ignorestderr -- kill $server_pid 2> /dev/null
    #global control_port
    #set sock [socket localhost $control_port]
    #close $sock
}

proc escape {str} {
    return [string map {\r {\r} \n {\n}} $str]
}

test empty-post-request-1 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "POST /form-example HTTP/1.1\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 52\n\ntest message POST headers= fields= multiValueFields=}

test empty-post-request-2 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "POST /form-example HTTP/1.1\nContent-Length: 0\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 68\n\ntest message POST headers=content-length 0 fields= multiValueFields=}

test check-headers-parsing-1 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "POST /form-example HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 15\r\n\r\nmsg=hello&to=me"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 131\n\ntest message POST headers=content-length 15 content-type application/x-www-form-urlencoded fields=msg hello to me multiValueFields=}

test check-headers-parsing-2 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "POST /form-example HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 15\n\nmsg=hello&to=me"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 131\n\ntest message POST headers=content-length 15 content-type application/x-www-form-urlencoded fields=msg hello to me multiValueFields=}

test urlencoded-form-with-multi-value-fields-1 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "POST /form-example HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 22\n\nmsg=hello&to=me&to=you"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 143\n\ntest message POST headers=content-length 22 content-type application/x-www-form-urlencoded fields=msg hello to you multiValueFields=to {me you}}

test multipart-form-1 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "POST /form-example HTTP/1.1\nContent-Type: multipart/form-data; boundary=---------------------------9051914041544843365972754266\nContent-Length: 476\n\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"text\"\n\ntext default\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"file1\"; filename=\"a.txt\"\nContent-Type: text/plain\n\nContent of a.txt.\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"file2\"; filename=\"a.html\"\nContent-Type: text/html\n\n<!DOCTYPE html><title>Content of a.html.</title>"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 215\n\ntest message POST headers=content-length 476 content-type {multipart/form-data; boundary=---------------------------9051914041544843365972754266} fields=text {text default} file1 a.txt file2 a.html multiValueFields=}