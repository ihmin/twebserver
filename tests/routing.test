package require tcltest
package require twebserver

namespace import -force ::tcltest::test

::tcltest::configure {*}$argv

set server_file "setup_server_routing.tcl"
set server_port 12345
set client_port 54321
set control_port 11111
set dir [file dirname [info script]]

proc sleep {ms} {
    after $ms [list set ::sleep 1]
    vwait ::sleep
    unset ::sleep
}

proc setup {} {
    global server_pid
    global dir
    global server_file
    set TCLSH tclsh[info tclversion]
    set server_pid [exec -ignorestderr -- $TCLSH [file join $dir ${server_file}] &]
    sleep 1000
}

proc cleanup {} {
    global server_pid
    exec -ignorestderr -- kill $server_pid 2> /dev/null
    #global control_port
    #set sock [socket localhost $control_port]
    #close $sock
}

proc escape {str} {
    return [string map {\r {\r} \n {\n}} $str]
}

test not-found-1 {not found} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /hello HTTP/1.1\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 404\nContent-Type: text/plain\nContent-Length: 9\n\nnot found}

sleep 100

test bad-request-invalid-http-method {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "ABC /hello HTTP/1.1\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 400\nContent-Length: 11\n\nBad Request}

sleep 100

test bad-request-invalid-http-version-1 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /hello HTTP/A.B.C\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 400\nContent-Length: 11\n\nBad Request}

sleep 100

test bad-request-invalid-http-version-2 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /hello HTTP/1.B\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 400\nContent-Length: 11\n\nBad Request}

sleep 100

test internal-server-error-1 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /someerror HTTP/1.\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 500\nContent-Length: 21\n\nInternal Server Error}

sleep 100

test match-prefix-1 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /asdf HTTP/1.\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 27\n\ntest message GET path=/asdf}

test match-prefix-2 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /asdf/asdf HTTP/1.\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 32\n\ntest message GET path=/asdf/asdf}

test match-path-parameters-1 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /qwerty/12345/sayhi HTTP/1.\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\ncontent-type: text/plain\nContent-Length: 70\n\ntest message GET path=/qwerty/12345/sayhi pathParameters=user_id 12345}


test match-path-parameters-2 {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /qwerty/54321/sayhi HTTP/1.\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\ncontent-type: text/plain\nContent-Length: 70\n\ntest message GET path=/qwerty/54321/sayhi pathParameters=user_id 54321}

test strict-do-not-match-trailing-backslash {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "GET /qwerty/54321/sayhi/ HTTP/1.\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 404\nContent-Type: text/plain\nContent-Length: 9\n\nnot found}

test match-post-request {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "POST /example HTTP/1.\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 200\nContent-Type: text/plain\nContent-Length: 26\n\ntest message POST headers=}

test strict-do-not-match-post-request-with-trailing-backslash {} -setup setup -cleanup cleanup -body {
    global cmd
    set request "POST /example/ HTTP/1.\n\n"
    set cmd "openssl s_client -connect localhost:${server_port} -servername localhost -quiet"
    set response [exec -ignorestderr -keepnewline -- {*}${cmd} -tls1_3 << $request 2> /dev/null]
    escape $response
} -result {HTTP/1.1 404\nContent-Type: text/plain\nContent-Length: 9\n\nnot found}